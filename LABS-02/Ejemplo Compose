Ejemplo de Archivo docker-compose.yml
Este ejemplo configura dos servicios: una base de datos MySQL y una aplicación web usando PHP y Apache.

Crea un directorio para tu proyecto y navega a él:

mkdir mi_proyecto
cd mi_proyecto
Crea un archivo llamado docker-compose.yml dentro de este directorio:
version: '3.8'
services:
  db:
    image: mysql:5.7
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: testdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

  web:
    image: php:7.4-apache
    container_name: php_web
    volumes:
      - ./html:/var/www/html
    ports:
      - "8080:80"
    depends_on:
      - db

volumes:
  db_data:
Servicios Definidos:
db: Utiliza una imagen de MySQL y configura una base de datos.
web: Utiliza una imagen de PHP con Apache y monta el directorio html en el contenedor para servir los archivos.
Paso 1: Crear el Directorio html para Archivos Web
Crea el directorio html dentro de tu proyecto y agrega un archivo index.php como prueba.

mkdir html
echo "<?php phpinfo(); ?>" > html/index.php
Paso 2: Ejecutar Docker Compose
Desde el directorio donde creaste el archivo docker-compose.yml, ejecuta el siguiente comando para iniciar los contenedores:

docker-compose up -d
La opción -d ejecuta los contenedores en segundo plano.
Paso 3: Verificar que los Servicios están Corriendo
Verifica que los contenedores están en ejecución:

docker ps
Abre un navegador y visita http://localhost:8080. Deberías ver la página de información de PHP si todo está funcionando correctamente.

Detener los Contenedores
Para detener y eliminar los contenedores, ejecuta:

docker-compose down
Este ejemplo configura y ejecuta una base de datos MySQL y una aplicación web básica en PHP utilizando Docker Compose.
